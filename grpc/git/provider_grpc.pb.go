// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package git

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitProviderClient is the client API for GitProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitProviderClient interface {
	// rpc GetRepositoryNames(GetRepositoryNamesRequest) returns (stream GetRepositoryNamesResponse);
	GetRepositoryNames(ctx context.Context, in *GetRepositoryNamesRequest, opts ...grpc.CallOption) (*GetRepositoryNamesResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
}

type gitProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewGitProviderClient(cc grpc.ClientConnInterface) GitProviderClient {
	return &gitProviderClient{cc}
}

func (c *gitProviderClient) GetRepositoryNames(ctx context.Context, in *GetRepositoryNamesRequest, opts ...grpc.CallOption) (*GetRepositoryNamesResponse, error) {
	out := new(GetRepositoryNamesResponse)
	err := c.cc.Invoke(ctx, "/git.GitProvider/GetRepositoryNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitProviderClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, "/git.GitProvider/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitProviderServer is the server API for GitProvider service.
// All implementations must embed UnimplementedGitProviderServer
// for forward compatibility
type GitProviderServer interface {
	// rpc GetRepositoryNames(GetRepositoryNamesRequest) returns (stream GetRepositoryNamesResponse);
	GetRepositoryNames(context.Context, *GetRepositoryNamesRequest) (*GetRepositoryNamesResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	mustEmbedUnimplementedGitProviderServer()
}

// UnimplementedGitProviderServer must be embedded to have forward compatible implementations.
type UnimplementedGitProviderServer struct {
}

func (UnimplementedGitProviderServer) GetRepositoryNames(context.Context, *GetRepositoryNamesRequest) (*GetRepositoryNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryNames not implemented")
}
func (UnimplementedGitProviderServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedGitProviderServer) mustEmbedUnimplementedGitProviderServer() {}

// UnsafeGitProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitProviderServer will
// result in compilation errors.
type UnsafeGitProviderServer interface {
	mustEmbedUnimplementedGitProviderServer()
}

func RegisterGitProviderServer(s grpc.ServiceRegistrar, srv GitProviderServer) {
	s.RegisterService(&GitProvider_ServiceDesc, srv)
}

func _GitProvider_GetRepositoryNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProviderServer).GetRepositoryNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.GitProvider/GetRepositoryNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProviderServer).GetRepositoryNames(ctx, req.(*GetRepositoryNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitProvider_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitProviderServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/git.GitProvider/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitProviderServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitProvider_ServiceDesc is the grpc.ServiceDesc for GitProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "git.GitProvider",
	HandlerType: (*GitProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRepositoryNames",
			Handler:    _GitProvider_GetRepositoryNames_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _GitProvider_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "git/provider.proto",
}
